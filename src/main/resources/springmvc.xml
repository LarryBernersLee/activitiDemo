<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	    http://www.springframework.org/schema/mvc
	    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
	    http://www.springframework.org/schema/context
	    http://www.springframework.org/schema/context/spring-context-4.0.xsd
	    http://www.springframework.org/schema/tx 
	    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	    http://www.springframework.org/schema/aop 
	    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

	<!-- 主要作用于@Controller，激活该模式，下面是一种简写形式，完全可以手动配置替代这种简写形式，它会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter，是spring 
		MVC为@Controllers分发请求所必须的 -->

	<aop:aspectj-autoproxy />
	<mvc:annotation-driven />
	<tx:annotation-driven transaction-manager="transactionManager"/>
	<!-- 自动扫描,完成bean创建和依赖注入 -->
	<context:component-scan base-package="com.aoyuntech.yunling" />
	<!-- 配置js,css等静态文件直接映射到对应的文件夹，不被DispatcherServlet处理 -->

	<!-- jsp页面解析器，当Controller返回XXX字符串时，先通过拦截器，然后该类就会在/WEB-INF/pages/目录下，查找XXX.jsp文件 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/pages/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="0" />
	</bean>

	<!-- json用法一 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />
				<ref bean="stringHttpMessageConverter" />
			</list>
		</property>
	</bean>
	<bean id="stringHttpMessageConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" 
		id="mappingJacksonHttpMessageConverter"/> -->
	<bean
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"
		id="mappingJacksonHttpMessageConverter" />

	<!-- 配置拦截器，除了登录不拦截之外，所有的请求都拦截进行二次认证 -->
	<!-- <mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="com.aoyuntech.yunling.filter.TwoCertification">
				<property name="exceptUrls">
					<list>
						<value>/YLResourceMgr/v1/login</value>
						<value>/YLResourceMgr/</value>
					</list>
				</property>
			</bean>
		</mvc:interceptor>
	</mvc:interceptors> -->
	
	<bean id="multipartResolver"   class="org.springframework.web.multipart.commons.CommonsMultipartResolver">    
        <!-- 设置上传文件的最大尺寸为10MB -->    
        <property name="maxUploadSize">    
            <value>1048576000</value>    
        </property>    
            <property name="maxInMemorySize">  
            <value>10240</value>  
        </property>  
    </bean>   
    
    
    <!-- APP端验证Token拦截器配置 --> 
    <mvc:interceptors>  
        <mvc:interceptor>  
            <mvc:mapping path="/*/*" />  
            <bean class="com.interceptor.TokenVerificationInterceptor">  
                <property name="interceptUrls">  
                    <list>  
                         <!--需要拦截的app接口 -->
                           <value>/sign</value>
                           <value>/carInspect</value>
                           <value>/message</value>
                           <value>/question</value>
                           <value>/task</value>
                           <value>/resource/getResourceDetails</value>
                    </list>  
                </property>  
            </bean>  
        </mvc:interceptor>  
      </mvc:interceptors>
    
</beans>